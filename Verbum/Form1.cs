using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.IO.Ports;

namespace Verbum
{
    public partial class Form1 : Form
    {
        byte[] pch = {0x00,0x00,0x00,0x00,0x00,		// SPACE
                    0x00,0x00,0x7d,0x00,0x00,		// BANG
       	            0x00,0x60,0x00,0x60,0x00,		// DOUBLE QUOTE
       	            0x14,0x7f,0x14,0x7f,0x14,		// OCTOTHORPE
       	            0x12,0x2a,0x7f,0x2a,0x24,		// DOLLAR SIGN
       	            0x62,0x64,0x08,0x13,0x23,		// PERCENT SIGN
       	            0x36,0x49,0x35,0x02,0x05,		// AMPERSAND
       	            0x00,0x00,0x70,0x00,0x00,		// SINGLE QUOTE
       	            0x00,0x1c,0x22,0x41,0x00,		// LEFT PARENTHESIS
       	            0x00,0x41,0x22,0x1c,0x00,		// RIGHT PARENTHESIS
       	            0x22,0x14,0x7f,0x14,0x22,		// SPLAT
       	            0x08,0x08,0x3e,0x08,0x08,		// PLUS
       	            0x00,0x01,0x06,0x00,0x00,		// COMMA
       	            0x08,0x08,0x08,0x08,0x08,		// HYPHEN
       	            0x00,0x00,0x01,0x00,0x00,		// PERIOD
       	            0x02,0x04,0x08,0x10,0x20,		// SLASH
       	            0x3e,0x45,0x49,0x51,0x3e,		// 0
       	            0x00,0x21,0x7f,0x01,0x00,		// 1
        	        0x23,0x45,0x49,0x49,0x31,		// 2
       	            0x42,0x41,0x49,0x59,0x66,		// 3
       	            0x0c,0x14,0x24,0x7f,0x04,		// 4
       	            0x72,0x51,0x51,0x51,0x4e,		// 5
       	            0x1e,0x29,0x49,0x49,0x46,		// 6
       	            0x40,0x47,0x48,0x50,0x60,		// 7
       	            0x36,0x49,0x49,0x49,0x36,		// 8
       	            0x31,0x49,0x49,0x4a,0x3c,		// 9
       	            0x00,0x00,0x14,0x00,0x00,		// COLON
       	            0x00,0x01,0x16,0x00,0x00,		// SEMICOLON
       	            0x08,0x14,0x22,0x41,0x00,		// LESS THAN
       	            0x14,0x14,0x14,0x14,0x14,		// EQUALS
        	        0x00,0x41,0x22,0x14,0x08,		// GREATER THAN
       	            0x20,0x40,0x4d,0x50,0x20,		// QUESTION MARK
       	            0x3e,0x41,0x5d,0x4d,0x39,		// AT SIGN
       	            0x1f,0x24,0x44,0x24,0x1f,		// A
       	            0x7f,0x49,0x49,0x49,0x36,		// B
       	            0x3e,0x41,0x41,0x41,0x22,		// C
       	            0x7f,0x41,0x41,0x41,0x3e,		// D
       	            0x7f,0x49,0x49,0x49,0x41,		// E
       	            0x7f,0x48,0x48,0x48,0x40,		// F
       	            0x3e,0x41,0x41,0x49,0x6f,		// G
       	            0x7f,0x08,0x08,0x08,0x7f,		// H
       	            0x00,0x41,0x7f,0x41,0x00,		// I
       	            0x02,0x01,0x01,0x01,0x7e,		// J
       	            0x7f,0x08,0x14,0x22,0x41,		// K
       	            0x7f,0x01,0x01,0x01,0x01,		// L
       	            0x7f,0x20,0x18,0x20,0x7f,		// M
       	            0x7f,0x10,0x08,0x04,0x7f,		// N
       	            0x3e,0x41,0x41,0x41,0x3e,		// O
       	            0x7f,0x48,0x48,0x48,0x30,		// P
       	            0x3e,0x41,0x45,0x42,0x3d,		// Q
       	            0x7f,0x48,0x4c,0x4a,0x31,		// R
       	            0x32,0x49,0x49,0x49,0x26,		// S
       	            0x40,0x40,0x7f,0x40,0x40,		// T
       	            0x7e,0x01,0x01,0x01,0x7e,		// U
       	            0x7c,0x02,0x01,0x02,0x7c,		// V
       	            0x7f,0x02,0x0c,0x02,0x7f,		// W
       	            0x63,0x14,0x08,0x14,0x63,		// X
       	            0x60,0x10,0x0f,0x10,0x60,		// Y
        	        0x43,0x45,0x49,0x51,0x61,		// Z
       	            0x7f,0x7f,0x41,0x41,0x41,		// LEFT BRACKET
       	            0x20,0x10,0x08,0x04,0x02,		// BACKSLASH
       	            0x41,0x41,0x41,0x7f,0x7f,		// RIGHT BRACKET
       	            0x04,0x08,0x10,0x08,0x04,		// CARET
       	            0x01,0x01,0x01,0x01,0x01};		// UNDERSCORE

        public Form1()
        {
            InitializeComponent();
            // REVERSE BYTES IN TABLE (ORIGINAL TABLE FROM PDP-8 VERBUM - CHARS ARE UPSIDE DOWN)
            //for (int i = 0; i < pch.Length; i++)
            //    pch[i] = Reverse(pch[i]);
            // GET COM PORTS LIST
            var ports = SerialPort.GetPortNames();
            comboBox1.DataSource = ports;
        }

        ~Form1()
        {
            // Put this here just in case
            serialPort1.Close();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            // PUNCH TEXT IN TEXT BOX
            for (int c = 0; c < textBox1.TextLength; c++)
            {
                char ch = textBox1.Text[c];
                if (ch < 32 || ch > 95) break;              //  LIMIT CHARACTERS
                serialPort1.Write(pch, (ch - 32) * 5, 5);   //  PUNCH ONE CHARACTER
                serialPort1.Write(pch, 0, 1);               //  PUNCH SPACE
            }
        }

        // REVERSE THE BYTE ORDER
        private Byte Reverse(byte b)
        {
            int a = 0;
            for (int i = 0; i < 8; i++)
                if ((b & (1 << i)) != 0)
                    a |= 1 << (7 - i);
            return (byte)a;
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (serialPort1.IsOpen) serialPort1.Close();
            // COM PORT
            serialPort1.BaudRate = 110;
            serialPort1.DataBits = 8;
            serialPort1.StopBits = StopBits.Two;
            serialPort1.Parity = Parity.None;
            serialPort1.PortName = comboBox1.SelectedItem.ToString();
            serialPort1.Open();
        }
    }
}
